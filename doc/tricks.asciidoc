[[tricks]]

== Tricks

[[object-representation]]
=== Object Representation

A rather useful representation of objects is to have some additional
metadata on your object for use by the GraphQL system in addition to
the base data fields which the client can request.

.Maps

If your object representation is a `map()`, you can add special fields
into the map which is used by the GraphQL system. You can add those
fields as you load the object from the backend database, in order to
make it easier to work with later. In Erlang systems, due to
immutability, a pointer to some static data is essentially free, as
long as terms share the same base value. So don't be afraid to add
some metadata on your object.

A common convention is to use a special atom such as
`'$tag'`.footnote:[In Erlang/OTP 20.0 and onward, atoms can be
arbitrary Unicode data, so you can pick a special symbol to mark
special atoms] You can then add data under that key in the map which
is useful to the GraphQL backend only.

In addition, our convention is that fields which _must_ be derived
begin with an underscore (e.g., `_images`). This makes it clear to the
reader that the data is not isosmurfically mappable into the Graph but
requires some kind of transformation.

.Wrappers

Rather than represent an object as a record such as `#starship{}` you
represent the data as a wrapped term: `{#starship{} = Ship, MetaData}`
and then you write your execution function such that it operates on
the wrapped term rather than the raw `Ship`. This has the advantage of
keeping the data separate from the raw plain data object. The
sacrifice, though, is you have to do more work in your object
resolution code.

[[non-isomorphism]]
=== Avoid Isomorphic representations

A common want when designing API systems is to avoid the need for
continual translation of backend data to the GraphQL schema. A
common solution to this problem is to make the database schema 1-1
with the GraphQL schema, often called an isomorphic
representation.footnote:[Isomorphic stems from ancient greek and means
"`equal shape`"] However, our experience is that such a 1-1 mapping is
detrimental to the development of the system. It is common the GraphQL
schema and the underlying data evolve at different paces and that new
data sources are added as you go along.

Thus, a piece of advice is to know when to break from the 1-1 mapping
and build your own translation layer in order to handle the gradual
evolution of the database schema and the GraphQL contract. In general,
you shouldn't be afraid of breaking the isomorphic representation if
that turns out to help you define your system in a better way. On the
flip side, inventing new terminology and names shouldn't in general be
done for the sake of doing so. The advantage of having an isomorphism
between the contract and the database is that you don't have to
explain to people what the mapping means.

* Look out for the situation where a simple change in the contract
  starts an avalanche of changes all throughout your stack. This tends
  to mean you have built a system where each layer transforms the
  data. Keep transformers down to as few layers as possible and let
  the end-points in the data passing handle the transformations.
* Large systems constantly change. Have some place in the code where
  you can insert a temporary stub or plug while you change other parts
  of the system. It is not generally possible to switch a system in
  one go as soon as it becomes large. By having a stub/plug you can
  gradually change the large system rather than having to change
  everything at once.

=== Middleware stacks

TBD

=== Data Loader

TBD

=== Fragments

TBD

