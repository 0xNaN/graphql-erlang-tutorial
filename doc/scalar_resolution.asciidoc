[[scalar-resolution]]

== Scalar Resolution

In a GraphQL specification, the structure of queries are defined by
objects, interfaces and unions. But the "`ground`" types initially
consist of a small set of standard types:

* Int--Integer values
* Float--Floating point values
* String--Textual strings
* Boolean--Boolean values
* ID--Identifiers: values which are opaque to the client

These ground types are called _Scalars_. The set of scalars is
extensible with your own types. Some examples of typical scalars to
extend a Schema by:

* DateTime objects--with or without time zone information
* Email addresses
* URIs
* Colors
* Refined types--Floats in the range 0.0-1.0 for instance

.Coercion

Clients input scalar values as strings. Thus, the input string has to
be _input coerced_ by the GraphQL system. Vice versa, when a value is
returned from the GraphQL backend, we must coerce so the client can
handle it. This is called _output coercion_.

.Validation, Canonicalization & Representation

The advantage of coercing inputs from the client is that not only can
we validate that the client sent something correct. We can also coerce
different representations at the client side into a canonical one on
the server side. This greatly simplifies the internals, as we can pick
a different internal representation than one which the client operates
with.

In particular, we can chose an internal representation which is
unrepresentable on the client side. That is, the client could be Java
or JavaScript and neither of those languages has a construct for
tuples which is nice to work with. At least not when we consider JSON
as a transport for those languages. Yet, due to canonicalization, we
may still use tuples and atoms internally in our Erlang code, as long
as we make sure to output-coerce values such that they are
representable by the transport and by the client.

.Star Wars and Scalar values

In the Star Wars schema, we have defined scalar *DateTime* which we
use to coerce datetimes. If a client supplies a datetime, we will run
that through the `iso8601` parsing library and obtain a
`calendar:datetime()` tuple in Erlang. On output coercion, we will
convert it back into ISO8601/RFC3339 representation. This demonstrates
the common phenomenon in which an internal representation (tuples) are
not realizable in the external representation--yet we can work around
representation problems through coercion:

.Schema Definition (`sw.schema`)
[source,erlang]
----
include::{sw_core}/priv/sw.schema[tags=scalarDateTime]
----

We have arranged that data loaded into Mnesia undergoes iso8601
conversion by default such that the internal data are
`calendar:datetime()` objects in Mnesia. When output-coercing these
objects, the GraphQL system realizes they are of type *DateTime*. This
calls into the scalar conversion code we have mapped into the Star
Wars schema:

.Coercion code (`sw_core_scalar.erl`)
[source,erlang]
----
include::{sw_core}/src/sw_core_scalar.erl[tags=scalarRepr]
----

A scalar coercion is a pair of two functions

input/2:: Called whenever an scalar value needs to be coerced from
  _client_ to _server_. The valid responses are `{ok, Val} | {error,
  Reason}`. The converted response is substituted into the query so
  the rest of the code can work with converted vales only. If `{error,
  Reason}` is returned, the query is failed. This can be used to
  white-list certain inputs only and serves as a correctness/security
  feature.

output/2:: Called whenever an scalar value needs to be coerced from
  _server_ to _client_. The valid responses are `{ok, Val} | {error,
  Reason}`. Conversion makes sure that a client only sees coerced
  values. If an error is returned, the field is regarded as an error.
  It will be replaced by a `null` and <<null-propagation>> will occur.

In our scalar conversion pair, we handle *DateTime* by using the
`iso8601` module to convert to/from ISO8601 representation. We also
handle other manually defined scalar values by simply passing them
through.

NOTE: Built-in scalars such as Int, Float, String, Bool are handled by
the system internally and do not currently undergo Scalar
conversion. A special case exists for Int and Float. These are coerced
between automatically if it is safe to do so.footnote:[Some people call
this weak typing, but type promotion is probably a more apt term]

=== Example

Consider the following GraphQL query:

[source,graphql]
----
query SpeciesQ {
  node(id: "U3BlY2llczoxNQ==") {
    id
    ... on Species {
      name
      created
    }
  }
}
----

which returns the following response:

[source,json]
----
{
  "data": {
    "node": {
      "created": "2014-12-20T09:48:02Z",
      "id": "U3BlY2llczoxNQ==",
      "name": "Twi'lek"
    }
  }
}
----

The `id` given here can be decoded to `"Species:15"`. We can use the
Erlang shell to read in that species:

[source]
----
(sw@127.0.0.1)1> rr(sw_core_db). % <1>
[film,person,planet,sequences,species,starship,transport,
 vehicle]
(sw@127.0.0.1)2> mnesia:dirty_read(species, 15).
[#species{id = 15,
          edited = {{2014,12,20},{21,36,42}},
          created = {{2014,12,20},{9,48,2}}, <2>
          classification = <<"mammals">>,name = <<"Twi'lek">>,
          designation = undefined,
          eye_colors = [<<"blue">>,<<"brown">>,<<"orange">>,
                        <<"pink">>],
          ...}]
----          
<1> Tell EShell where the records live so we can get better printing
  in the shell.
<2> Note the representation in the backend.

When the field `created` is requested, the system will return it as
`{{2014,12,20},{9,48,2}}` and because it has type *DateTime* it will
undergo output coercion to the ISO8601 representation.

How the field is requested and fetched out of the Mnesia database is
described in the section <<object-resolution>>.

