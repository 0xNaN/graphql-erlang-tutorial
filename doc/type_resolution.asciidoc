[[type-resolution]]
== Type Resolution

In GraphQL, certain types are _abstract_. These are interfaces and
unions. When the GraphQL system encounters an abstract type, it must
have a way to _resolve_ those abstract types into concrete (output)
types. This is handled by the type resolution mapping.

The executor of GraphQL queries uses the type resolver when it wants
to make an abstract object concrete. The executor can then continue
working with the concretized object and thus determine if fragments
should expand and so on.

A type resolver takes an Erlang term as input and provides a resolved
type as output:

[source,erlang]
----
-spec execute(Term) -> {ok, Type} | {error, Reason}
  when
    Term :: term(),
    Type :: atom(),
    Reason :: term().
----

The `Term` is often some piece of data loaded from a database, but it
can be any representation of data in the Erlang system. The purpose of
the `execute/1` function is to analyze that data and return what type
it belongs to (as an atom). In our case, we can assume resolution
works on Mnesia objects. Hence, by matching on Mnesia objects, we can
resolve the type in the Graph of those objects (file: `sw_core_type.erl`):

[source,erlang]
----
include::{sw_core}/src/sw_core_type.erl[tags=resolveType]
----

TIP: In larger implementations, you often use multiple type resolvers
and use the mapping rules to handle different abstract types via
different resolvers. Also, type resolution is likely to forward
decisions to other modules and merely act as a dispatch layer for the
real code. The current implementation allows for a great deal of
flexibility for this reason.

Use pattern matching in the `execute/1` function to vary what
kinds of data you can process. Do not be afraid to wrap your objects
into other objects if that makes it easier to process. Since you can
handle any Erlang term, you can often wrap your objects in a map of
metadata and use the metadata for figuring out the type of the object.
See <<object-representation>> for a discussion of several commonly
used variants.


