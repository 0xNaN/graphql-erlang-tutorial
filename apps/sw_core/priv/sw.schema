# tag::nodeInterface[]
+description(text: "Relay Modern Node Interface")
interface Node {
  +description(text: "Unique Identity of a Node")
  id : ID!
}
# end::nodeInterface[]

type PageInfo {
  hasNextPage : Boolean!
  hasPreviousPage : Boolean!
}

type StarshipPilotsConnection {
  pageInfo : PageInfo
}

type StarshipFilmsConnection {
  pageInfo : PageInfo
}

# tag::starshipObject[]
+description(text: "Representation of Star Ships")
type Starship implements Node {
  id : ID!
  name : String
  model : String
  starshipClass : String
  manufacturers : [String]
  costInCredits : Float
  length : Float
  crew : String
  passengers : String
  maxAtmospheringSpeed : Int
  hyperdriveRating : Float
  MGLT : Int
# end::starshipObject[]
  cargoCapacity : Float
  consumables : String
  pilotConnection(
    after : String
    first : Int
    before : String
    last : Int) : StarshipPilotsConnection
  filmConnection(
    after : String
    first : Int
    before: String
    last: Int) : StarshipFilmsConnection
  created: String
  edited: String
}

# tag::filmObject[]
type Film {
  title : String
  episodeID : Int
  openingCrawl : String
  director : String
  producers : [String]
  releaseDate : String
  speciesConnection(after: String, first: Int,
                    before: String, last: Int)
    : FilmSpeciesConnection
  created : String
  edited : String
  id : ID!
}
# end::filmObject[]

# tag::speciesObject[]
type Species {
  name : String
  classification : String
  designation : String
  averageHeight : String
  averageLifespan : String
  eyeColors : [String]
  hairColors : [String]
  skinColors : [String]
  language : String
  homeworld : Planet
  created : String
  edited : String
  id : ID!
}
# end::speciesObject[]

# tag::planetObject[]
type Planet {
  name : String
  diameter : Int
  rotationPeriod : Int
  orbitalPeriod : Int
  gravity : String
  population : Float
  climates : [String]
  terrains : [String]
  surfaceWater : Float
  created : String
  edited : String
  id : ID!
}
# end::planetObject[]

# tag::queryObject[]
type Query {
  +description(text: "Relay Modern specification Node fetcher")
  node(id : ID!) : Node
  +description(text: "Fetch a starship with a given Id")
  starship(id : ID!) : Starship
}
# end::queryObject[]

type Mutation {
  dummy : Node
}

## -- CONNECTION OBJECTS --------
##
## This section implements connection objects according to the relay modern conventions

type FilmSpeciesConnection {
  pageInfo : PageInfo!
  edges : [FilmSpeciesEdge]
  totalCount : Int
  species : [Species]
}

type FilmSpeciesEdge {
  node : Species
  cursor : String!
}
