== Terminology

This section defines terminology used in GraphQL that doesn't fit in
the rest of the document. It is used as a reference to describe
certain behaviors in a GraphQL implementation.

[[null-propagation]]
=== Null Propagation

In GraphQL, fields are _nullable_ by default. A generic field `f : T` can
either take on the value of `T` or the value `null` if the rendering
of the field fails for some reason.

In contrast, a field can be non-nullable, `f : T!` in which case the
field is not allowed to take on the value of `null`.

If you try to complete a non-null field in an object, and `null` is
returned, or an error occur, then the whole object becomes `null`.
This notion _propagates_ until all of the query becomes `null` or we
reach a nullable field, whichever comes first.

TIP: If you are accustomed to writing statically typed programs, you
may desire to mark as many fields as possible non-null. But the
sacrifice made by doing so is that you can't return partial results.
GraphQL servers are often distributed in nature and handle distributed
backends. Thus, it is fairly often the case that some part of the
system is down, while other parts of the system is up. By having some
fields nullable, you allow the system to null out failing subsystems,
while still providing answers for the parts of the query that can be
fulfilled currently. Too many non-nullable types will make your system
brittle as every document is an all-or-nothing approach.

[[HATEOAS]]
=== Hypertext as the engine of application state

Hypertext embedded in responses can have users "`click around`" in
your API. If you embed the possible operations as links in responses,
a client can use returned data to learn what it can do with the data.
Roy T. Fielding's PhD thesis covers this in great detail.

GraphQL doesn't implement HATEOAS, but it gets fairly close to the
idea. Given that a GraphQL query can be introspected, you can
gradually learn about the interface as a client and utilize that
interface. In practice however, it is common to lock down the possible
queries for a given client, in order to protect the system and get
security.

[[context]]
=== Context

The context map contains a number of base fields before the developers
extends the context with their own fields. This section describes
those fields and their purpose:

* TBD

[[cqrs]]
=== CQRS

CQRS stands for Command-Query Responsibility Separation. The idea stems
from the observation that querying data often have a different feel
than commanding the system to do changes. So rather than trying to
solve both in one interface, you slice the system such that you have a
query-part which pertains only to querying data, and a command-part
which pertains to mutating data.

Often, the command section becomes a system based on an append-only
event log in which command processors read events and make changes to
the system. These changes are then made persistent and ready for
query.

The Query system is built with dynamic arbitrary queries in mind and
is focused on this only.

The splitting often helps larger system as they tend to have large
differences in the Query part and the Command part.

[[cursor]]

=== Cursor

We often use the term "`cursor`" in this tutorial. Imagine that a
GraphQL is rendered by moving a cursor around in the data set and then
rendering each part of the query as the cursor moves around. As the
cursor traverses (recursively) deeper into the data set, more parts of
the query may be rendered on demand.

In practice, the cursor can be executed in parallel. If you submit a
`query` you must assume that rendering will happen in parallel when
possible. In contrast, a `mutation` will always process the query
serially one element at a time. This is to make sure changes for a
given query are not interfering with each other.

NOTE: A typical system has on the order of 100:1 queries to
mutations. It is very likely your data is queried far more often than
they are mutated. Thus, if you look to optimize, optimize for queries
first, unless you happen to know you have a large amount of mutations.


