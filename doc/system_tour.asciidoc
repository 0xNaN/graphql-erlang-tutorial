[[system-tour]]
== System Tour

Since a system as large as GraphQL can seem incomprehensible when you
first use it, we will begin by providing a system tour explaining by
example how the system works. In order to start the system for the
first time, we must construct a _release_.

.Releases
****
Erlang uses a concept called _releases_ for real applications. A
release consists of:

* An erlang emulator for the virtual machine, BEAM as a binary in the
  operating system.
* The set of applications which is configured to be inside the
  release.
* Every dependent application needed by the release-configuration.
* Support libraries for executing the emulator, binary NIF shared
  objects (NIF: Native implemented function), and so on.
* Configuration for the system and runtime

A release is a self-contained Erlang system living in its own
directory structure. It can be copied to a target machine and started
without having to install any support libraries, as long as the system
architecture is the same. If you provide an appropriate BEAM emulator
for the given architecture, the code will run with little to no
modification as well since the Erlang byte code is highly portable. It
even works across Erlang/OTP versions (subject to some restrictions).
****

To make a release, run the following command:

[source]
----
$ make release
----

This builds a release inside the `_build` directory and makes it
available. In order to run the release, we can ask to run it with a
console front-end, so we get a shell on the Erlang system:

[source]
----
$ _build/default/rel/sw/bin/sw console
----

The system should boot and start running. A typical invocation looks
like:

[source]
----
Erlang/OTP 19 [erts-8.3] [source] [64-bit] [smp:8:8] [async-threads:30] [hipe] [kernel-poll:true] [dtrace]

15:33:05.705 [info] Application lager started on node 'sw@127.0.0.1'
15:33:05.705 [info] Application ranch started on node 'sw@127.0.0.1'
15:33:05.706 [info] Application graphql started on node 'sw@127.0.0.1'
15:33:05.706 [info] Application sw_core started on node 'sw@127.0.0.1'
15:33:05.706 [info] Application cowboy started on node 'sw@127.0.0.1'
15:33:05.706 [info] Starting HTTP listener on port 17290
Eshell V8.3  (abort with ^G)
(sw@127.0.0.1)1>
----

TIP: To exit an Erlang node like this, you can either Ctrl-C twice
which stops the system abruptly. Or you can be nice to the system and
ask it to close gracefully one application at a time by entering
`q().<RET>` in the shell.

Once the Erlang emulator is running our `sw` release, we can point a
browser to http://localhost:{port-number}/ and you should be greeted
with the following screen:

[#img-graphiql]
.The initial greeting screen for the GraphQL system
image::graphiql.png[GraphiQL]

=== First query

The first query we will run requests a given *Planet* from the system.
In accordance with the rules of {relay} GraphQL conventions, we
will load this *Planet* via the _Object Identification_ conventions:

[source,graphql]
----
query PlanetQuery {
  node(id:"UGxhbmV0OjE=") { # <1>
    ... on Planet { # <2>
      id # <3>
      name
      climate
    }
  }
}
----
<1> The *ID* entered here is opaque to the client, and we assume it
    was obtained in an earlier query. We will show typical ways to
    list things later in this section.
<2> This notation, if you are only slightly familiar with GraphQL is
    called an _inline fragment_. The output of the `node` field is of
    type *Node* and here we restrict ourselves to the type *Planet*.
<3> This requests the given fields in the particular planet we loaded.

If you enter this in the GraphiQL left window and press the "`Run`"
button, you should get the following response:

[source,json]
----
{
  "data": {
    "node": {
      "climate": "arid",
      "id": "UGxhbmV0OjE=",
      "name": "Tatooine"
    }
  }
}
----

Note how the response reflects the structure of the query. This is a
powerful feature of GraphQL since it allows you to build up queries
client side and get deterministic results based off of your
query-structure.

=== More advanced queries

Let us look at a far more intricate query. In this query, we will also
request a planet, but then we will ask "`what films does this planet
appear in?`" and we will ask "`Who are the residents on the
planet?`"--who has the planet as their homeworld?.

To do this, we use pagination. We ask for the first 2 films and the
first 3 residents. We also ask for the relevant meta-data of the
connections as we are here:

[source,graphql]
----
query Q {
  node(id:"UGxhbmV0OjE=") {
    ... on Planet {
      id
      name
      climate
      filmConnection(first: 2) {
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
        }
        edges {
          node {
            ...Films
          }
          cursor
        }
      }
      residentConnection(first: 3) {
        totalCount
        pageInfo {
          hasNextPage
          hasPreviousPage
        }
        edges {
          node {
            ...Residents
          }
          cursor
        }
      }
    }
  }
}

fragment Films on Film {
  id
  title
  director
}

fragment Residents on Person {
  id
  name
  gender
}
----

The `fragment` parts allows your queries to re-use different subsets
of a larger query again and again. We use this here to show off that
capability of GraphQL. The result follows the structure of the query:

[source,json]
----
{
  "data": {
    "node": {
      "climate": "arid",
      "filmConnection": {
        "edges": [
          {
            "cursor": "MQ==",
            "node": {
              "director": "George Lucas",
              "id": "RmlsbTox",
              "title": "A New Hope"
            }
          },
          {
            "cursor": "Mg==",
            "node": {
              "director": "Richard Marquand",
              "id": "RmlsbToz",
              "title": "Return of the Jedi"
            }
          }
        ],
        "pageInfo": {
          "hasNextPage": true,
          "hasPreviousPage": false
        },
        "totalCount": 5
      },
      "id": "UGxhbmV0OjE=",
      "name": "Tatooine",
      "residentConnection": {
        "edges": [
          {
            "cursor": "MQ==",
            "node": {
              "gender": "n/a",
              "id": "UGVyc29uOjg=",
              "name": "R5-D4"
            }
          },
          {
            "cursor": "Mg==",
            "node": {
              "gender": "male",
              "id": "UGVyc29uOjEx",
              "name": "Anakin Skywalker"
            }
          },
          {
            "cursor": "Mw==",
            "node": {
              "gender": "male",
              "id": "UGVyc29uOjE=",
              "name": "Luke Skywalker"
            }
          }
        ],
        "pageInfo": {
          "hasNextPage": true,
          "hasPreviousPage": false
        },
        "totalCount": 10
      }
    }
  }
}
----

=== Simple Mutations

Now, let us focus on altering the database through a _mutation_. In
GraphQL, this is the way a client runs "`stored procedures`" on the
Server side. The Star Wars example has tooling for factions in the
Star Wars universe, but there are currently no factions defined. Let
us amend that by introducing the rebels:

[source,graphql]
----
mutation IntroduceFaction($input: IntroduceFactionInput!) {
  introduceFaction(input: $input) {
    clientMutationId
    faction {
      id
      name
      ships {
        totalCount
      }
    }
  }
}
----

This query uses the GraphQL feature of input variables. In the UI, you
can click and expand the section _Query Variables_ under the query
pane. This allows us to build a generic query like the one above and
then repurpose it for creating any faction by providing the input
variables for the query:

[source,json]
----
{
  "input": {
    "clientMutationId": "D9A5939A-DF75-4C78-9B32-04C1C64F9D9C", # <1>
    "name": "Rebels"
  }
}
----
<1> This is chosen arbitrarily by the client and can be any string.
Here we use an UUID.

The server, when you execute this query, will respond with the
creation of a new *Faction* and return its id, name and starships:

[source,json]
----
{
  "data": {
    "introduceFaction": {
      "clientMutationId": "D9A5939A-DF75-4C78-9B32-04C1C64F9D9C", # <1>
      "faction": {
        "id": "RmFjdGlvbjoxMDAy", # <2>
        "name": "Rebels",
        "ships": {
          "totalCount": 0 # <3>
        }
      }
    }
  }
}
----
<1> The server reflects back the unique client-generated Id for
correlation purposes.
<2> The Id migth be different depending on how many *Faction* objects
    you created.
<3> We have yet to assign any starships to the faction, so the count
    is currently 0.

We can now query this faction by its Id because it was added to the
system:

[source,graphql]
----
query FactionQuery {
  node(id: "RmFjdGlvbjoxMDAy") {
     ... on Faction {
       id
       name
     }
  }
}
----

The system also persisted the newly created faction in its database so
restarting the system keeps the added faction.

CAUTION: Use `q()` in the shell to close the system gracefully.
Otherwise you may be in a situation where a change isn't reflected on
disk. The system will still load a consistent view of the database,
but it will be from before the transaction were run. The Mnesia system
used is usually quick at adding data to its WAL, but there is no
guarantee.

=== More complex mutations

With the rebels in the Graph, we can now create a new Starship, a
B-Wing, which we will add to the graph. We will also attach it to the
newly formed faction of Rebels. The mutation here exemplifies
operations in which you bind data together in GraphQL. Our mutation
looks like:

[source,graphql]
----
mutation IntroduceBWing {
  introduceStarship(input:
    { costInCredits: 5.0, # <1>
      length: 20.0, 
      crew: "1", 
      name: "B-Wing",
      faction: "RmFjdGlvbjoxMDAy", # <2>
      starshipClass: "fighter"}) {
    starship {
      id
      created
      name
    }
    faction {
      id
      name
      ships {
        totalCount
        
        edges {
          node {
            id name
          }
        }
      }
    }
  }
}
----
<1> The values here are not for a "`real`" B-wing fighter, but are
    just made up somewhat arbitrarily.
<2> The ID of the Faction. If you run this the ID may be a bit
    different so make sure you get the right ID here.

We create a new Starship, a B-wing, in the Rebels faction. Note the
resulting object, *IntroduceStarshipPayload*, contains the newly
created *Starship* as well as the *Faction* which was input as part of
the query. This is common in GraphQL: return every object of interest
as part of a mutation.

The result of the query is:

[source,json]
----
{
  "data": {
    "introduceStarship": {
      "faction": {
        "id": "RmFjdGlvbjoxMDAy",
        "name": "Rebels",
        "ships": {
          "edges": [
            {
              "node": {
                "id": "U3RhcnNoaXA6MTAwMQ==",
                "name": "B-Wing"
              }
            }
          ],
          "totalCount": 1
        }
      },
      "starship": {
        "created": "2017-05-30T13:52:19Z",
        "id": "U3RhcnNoaXA6MTAwMQ==",
        "name": "B-Wing"
      }
    }
  }
}
----

Note how the newly formed starship is now part of the Rebel factions
starships, and that the total count of starships in the Faction is now
1. The `created` field on the Starship is automatically generated by
the system as part of introducing it.

Note: Not all the fields on the newly formed starship are "valid"
insofar we decided to reduce the interface here in order to make it
easier to understand in the tutorial. A more complete solution would
force us to input every field on the *Starship* we just introduced and
also use sensible defaults if not given.

=== This tutorial

This tutorial will tell you how to create your own system which can
satisfy queries as complex and complicated as the examples we just
provided. It will explain the different parts of the GraphQL system
and how you achieve the above.
